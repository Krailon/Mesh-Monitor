A!	MeshMonitor-1.0.33751	2.0	C#

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.iris.IRIS

C!	c:003	TRU.MeshMonitor.MeshMonitor	-1	0	c:000
R	Reply	b[]	0	0
R	ADC_Device	r:com.ibm.saguaro.system.ADC	0	1
R	GPIO_Device	r:com.ibm.saguaro.system.GPIO	0	2
R	HumidTempSensor	r:com.ibm.saguaro.system.SDev	0	3
R	LightSensor	r:com.ibm.saguaro.system.SDev	0	4
G	ADC_CHANNEL_MASK	u	0	2
G	FLAG_FAILED	u	0	64
G	LIGHT_PWR_PIN	b	0	37
G	READ_INTERVAL	u	0	5
G	REPLY_SIZE	u	0	64
G	TEMP_PWR_PIN	b	0	16
M	HumidTempCallback(u,b[],u,u,l)i	-1	m:0073	000E6	136
M	LightCallback(u,b[],u,u,l)i	-1	m:00B7	0016E	162
M!	MeshMonitor(r:TRU.MeshMonitor.MeshMonitor)v	-1	m:0121	00242	6
M	on_Data(u,b[],u)i	-1	m:0124	00248	18
M	on_SysInfo(i,i)i	-1	m:0108	00210	50

C	c:005	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	TRU.MeshMonitor.MeshMonitor.Reply	b[]	-1	0
r	TRU.MeshMonitor.MeshMonitor.ADC_Device	r:com.ibm.saguaro.system.ADC	-1	1
r	TRU.MeshMonitor.MeshMonitor.GPIO_Device	r:com.ibm.saguaro.system.GPIO	-1	2
r	TRU.MeshMonitor.MeshMonitor.HumidTempSensor	r:com.ibm.saguaro.system.SDev	-1	3
r	TRU.MeshMonitor.MeshMonitor.LightSensor	r:com.ibm.saguaro.system.SDev	-1	4
M	__init()v	-1	m:0020	00040	166

c	0004D	0	15	0	15	0	m:0020
c	00057	0	16	0	16	0	m:0020
c	00061	0	17	0	17	0	m:0020
c	0006B	0	19	0	19	0	m:0020
c	00075	0	20	0	20	0	m:0020
c	0007B	0	23	0	23	0	m:0020
c	0007C	0	24	0	24	0	m:0020
c	00082	0	26	0	26	0	m:0020
c	0008A	0	27	0	27	0	m:0020
c	00092	0	28	0	28	0	m:0020
c	00093	0	30	0	30	0	m:0020
c	0009E	0	31	0	31	0	m:0020
c	000A9	0	33	0	33	0	m:0020
c	000B6	0	34	0	34	0	m:0020
c	000C9	0	36	0	36	0	m:0020
c	000CF	0	37	0	37	0	m:0020
c	000D5	0	38	0	38	0	m:0020
c	000D8	0	39	0	39	0	m:0020
c	000D9	0	39	0	39	0	m:0020
c	000DA	0	40	0	40	0	m:0020
c	000E0	0	41	0	41	0	m:0020
c	000E3	0	43	0	43	0	m:0020
e	000E6	m:0020
c	000E9	0	74	0	74	0	m:0073
l	000E9	0016E	i	CS$1$0000	m:0073	8
l	000E9	0016E	z	CS$4$0001	m:0073	9
l	000E9	0016E	b[]	CS$0$0002	m:0073	10
l	000E9	0016E	u	ReadFlags	m:0073	0
l	000E9	0016E	b[]	ReadData	m:0073	1
l	000E9	0016E	u	ReadLength	m:0073	2
l	000E9	0016E	u	ReadInfo	m:0073	3
l	000E9	0016E	l	ReadTime	m:0073	4
c	000F5	0	76	0	76	0	m:0073
c	000FA	0	77	0	77	0	m:0073
c	000FF	0	78	0	78	0	m:0073
c	00104	0	81	0	81	0	m:0073
l	00104	0016B	u	payload_offset	m:0073	6
c	0010A	0	84	0	84	0	m:0073
c	0010F	0	85	0	85	0	m:0073
c	0011F	0	86	0	86	0	m:0073
c	0012C	0	89	0	89	0	m:0073
c	0013A	0	90	0	90	0	m:0073
c	00140	0	94	0	94	0	m:0073
c	0014C	0	95	0	95	0	m:0073
c	00158	0	97	0	97	0	m:0073
c	00159	0	98	0	98	0	m:0073
l	00159	00163	r:com.ibm.saguaro.system.MoteException	ex	m:0073	7
c	0015E	0	99	0	99	0	m:0073
c	00163	0	102	0	102	0	m:0073
c	00168	0	103	0	103	0	m:0073
c	0016B	0	105	0	105	0	m:0073
e	0016E	m:0073
c	00171	0	109	0	109	0	m:00B7
l	00171	0020F	i	CS$1$0000	m:00B7	8
l	00171	0020F	z	CS$4$0001	m:00B7	9
l	00171	0020F	b[]	CS$0$0002	m:00B7	10
l	00171	0020F	u	ReadFlags	m:00B7	0
l	00171	0020F	b[]	ReadData	m:00B7	1
l	00171	0020F	u	ReadLength	m:00B7	2
l	00171	0020F	u	ReadInfo	m:00B7	3
l	00171	0020F	l	ReadTime	m:00B7	4
c	0017D	0	110	0	110	0	m:00B7
c	00182	0	111	0	111	0	m:00B7
c	00187	0	112	0	112	0	m:00B7
c	0018D	0	115	0	115	0	m:00B7
l	0018D	0020C	u	payload_offset	m:00B7	6
c	00193	0	118	0	118	0	m:00B7
c	00198	0	119	0	119	0	m:00B7
c	001AF	0	120	0	120	0	m:00B7
c	001BC	0	121	0	121	0	m:00B7
c	001C5	0	124	0	124	0	m:00B7
c	001D3	0	125	0	125	0	m:00B7
c	001D9	0	129	0	129	0	m:00B7
c	001E5	0	130	0	130	0	m:00B7
c	001F9	0	132	0	132	0	m:00B7
c	001FA	0	133	0	133	0	m:00B7
l	001FA	00204	r:com.ibm.saguaro.system.MoteException	ex	m:00B7	7
c	001FF	0	134	0	134	0	m:00B7
c	00204	0	137	0	137	0	m:00B7
c	00209	0	138	0	138	0	m:00B7
c	0020C	0	140	0	140	0	m:00B7
e	00210	m:00B7
c	00213	0	52	0	52	0	m:0108
l	00213	00241	i	CS$1$0000	m:0108	3
l	00213	00241	z	CS$4$0001	m:0108	4
l	00213	00241	i	Type	m:0108	0
l	00213	00241	i	Info	m:0108	1
c	0021C	0	56	0	56	0	m:0108
c	00225	0	58	0	58	0	m:0108
c	0022B	0	60	0	60	0	m:0108
c	00234	0	62	0	62	0	m:0108
c	0023C	0	65	0	65	0	m:0108
c	0023D	0	70	0	70	0	m:0108
l	0023D	0023D	r:com.ibm.saguaro.system.MoteException	ex	m:0108	2
c	0023F	0	71	0	71	0	m:0108
e	00242	m:0108
l!	00245	00248	r:TRU.MeshMonitor.MeshMonitor	this	m:0121	0
e!	00248	m:0121
c	0024B	0	46	0	46	0	m:0124
l	0024B	0025A	i	CS$1$0000	m:0124	3
l	0024B	0025A	u	Info	m:0124	0
l	0024B	0025A	b[]	Buffer	m:0124	1
l	0024B	0025A	u	Length	m:0124	2
c	00256	0	47	0	47	0	m:0124
c	00258	0	48	0	48	0	m:0124
e	0025A	m:0124
S	C:\Users\Kerberos\Dropbox\Programming\Repos\Mesh-Monitor\MoteRunner\MeshMonitor.cs
:	namespace TRU.MeshMonitor {
:		using com.ibm.saguaro.system;
:		using com.ibm.iris;
:		
:		public class MeshMonitor {
:			
:			// Globals
:	        private const uint FLAG_FAILED = 0x40;
:			private const uint ADC_CHANNEL_MASK = 0x02;
:			private const uint REPLY_SIZE = 0x40; // 64
:			private const uint READ_INTERVAL = 5; // 5s
:			private const byte TEMP_PWR_PIN = IRIS.PIN_PW0; // PC0
:			private const byte LIGHT_PWR_PIN = IRIS.PIN_INT5; // PE5
:			
:			private static byte[] Reply = new byte[REPLY_SIZE];
:			private static ADC ADC_Device = new ADC();
:			private static GPIO GPIO_Device = new GPIO();
:	
:	        private static SDev HumidTempSensor = new SDev();
:	        private static SDev LightSensor = new SDev();
:	        //private static SDev AccelSensor = new SDev();
:	
:			static MeshMonitor() {
:				LED.setState(IRIS.LED_YELLOW, 1);
:	
:				Assembly.setDataHandler(on_Data);
:	            Assembly.setSystemInfoCallback(on_SysInfo);
:	            try {
:	                // Init read handlers
:	                LightSensor.setReadHandler(LightCallback);
:	                HumidTempSensor.setReadHandler(HumidTempCallback);
:	
:	                HumidTempSensor.open(IRIS.DID_MTS400_HUMID_TEMP, null, 0, 0);
:	                HumidTempSensor.read(Device.TIMED, 4, Time.currentTicks() + Time.toTickSpan(Time.SECONDS, READ_INTERVAL));
:	
:	                LED.setState(IRIS.LED_YELLOW, 0);
:				    LED.setState(IRIS.LED_GREEN, 1);
:	            }
:	            catch {
:	                LED.setState(IRIS.LED_RED, 1);
:	                return;
:	            }
:	        }
:	
:			private static int on_Data(uint Info, byte[] Buffer, uint Length) {
:				Util.copyData(Buffer, 0, Reply, 0, Length);
:				return 0;
:			}
:	
:	        private static int on_SysInfo(int Type, int Info)
:	        {
:	            if (Type == Assembly.SYSEV_DELETED)
:	            {
:	                try
:	                {
:	                    if (HumidTempSensor != null)
:	                    {
:	                        HumidTempSensor.close();
:	                    }
:	                    if (LightSensor != null)
:	                    {
:	                        LightSensor.close();
:	                    }
:	                }
:	                catch (MoteException ex)
:	                {
:	                }
:	            }
:	
:	            return 0;
:	        }
:	
:	        private static int HumidTempCallback(uint ReadFlags, byte[] ReadData, uint ReadLength, uint ReadInfo, long ReadTime) {
:	            if ((ReadFlags & FLAG_FAILED) != 0)
:	            {
:	                LED.setState(IRIS.LED_YELLOW, 1);
:	                LED.setState(IRIS.LED_RED, 1);
:	                return -1;
:	            }
:	            else {
:	                uint payload_offset = LIP.getPortOff() + 1;
:	
:	                // Copy sensor data into reply buffer
:	                LED.setState(IRIS.LED_YELLOW, 1);
:	                Util.copyData(new byte[] {0}, 0, Reply, payload_offset, 1); // Humidity+Temperature ID = 0
:	                Util.copyData(ReadData, 0, Reply, payload_offset + 1, ReadLength);
:	
:	                try {
:	                    if (HumidTempSensor.getState() != Device.S_CLOSED) {
:	                        HumidTempSensor.close();
:	                    }
:	
:	                    // Queue light sensor read
:	                    LightSensor.open(IRIS.DID_MTS400_LIGHT, null, 0, 0);
:	                    LightSensor.read(Device.ASAP, 2, 0);
:	                }
:	                catch (MoteException ex) {
:	                    LED.setState(IRIS.LED_RED, 1);
:	                    return -1;
:	                }
:	
:	                LED.setState(IRIS.LED_YELLOW, 0);
:	                return 0;
:	            }
:	        }
:	
:	        private static int LightCallback(uint ReadFlags, byte[] ReadData, uint ReadLength, uint ReadInfo, long ReadTime) {
:	            // Check flags
:	            if ((ReadFlags & FLAG_FAILED) != 0) {
:	                LED.setState(IRIS.LED_YELLOW, 1);
:	                LED.setState(IRIS.LED_RED, 1);
:	                return -1;
:	            }
:	            else {
:	                uint payload_offset = LIP.getPortOff() + 1;
:	
:	                // Copy sensor data into reply buffer and send
:	                LED.setState(IRIS.LED_YELLOW, 1);
:	                Util.copyData(new byte[] {1}, 0, Reply, payload_offset + 5, 1); // Light ID = 1
:	                Util.copyData(ReadData, 0, Reply, payload_offset + 6, ReadLength);
:	                LIP.send(Reply, 0, REPLY_SIZE);
:	
:	                try {
:	                    if (LightSensor.getState() != Device.S_CLOSED) {
:	                        LightSensor.close();
:	                    }
:	
:	                    // Queue humidity/temperature sensor read
:	                    HumidTempSensor.open(IRIS.DID_MTS400_HUMID_TEMP, null, 0, 0);
:	                    HumidTempSensor.read(Device.TIMED, 4, Time.currentTicks() + Time.toTickSpan(Time.SECONDS, READ_INTERVAL));
:	                }
:	                catch (MoteException ex) {
:	                    LED.setState(IRIS.LED_RED, 1);
:	                    return -1;
:	                }
:	                
:	                LED.setState(IRIS.LED_YELLOW, 0);
:	                return 0;
:	            }
:	        }
:	
:			/*
:	        private static int ADCReadCallback(uint ReadFlags, byte[] ReadData, uint ReadLength, uint ReadInfo, long ReadTime) {
:				uint offset = LIP.getPortOff() + 1;
:				byte[] sensor;
:	
:				LED.setState(IRIS.LED_YELLOW, 1);
:				if (GPIO_Device.doPin(GPIO.CTRL_READ, TEMP_PWR_PIN) == 0) {
:					sensor = new byte[] {0, 0}; // 0 => Temperature
:					GPIO_Device.configureOutput(TEMP_PWR_PIN, GPIO.OUT_SET);
:					GPIO_Device.configureOutput(LIGHT_PWR_PIN, GPIO.OUT_CLR);
:				}
:				else {
:					sensor = new byte[] {1, 0}; // 1 => Light
:					GPIO_Device.configureOutput(LIGHT_PWR_PIN, GPIO.OUT_SET);
:					GPIO_Device.configureOutput(TEMP_PWR_PIN, GPIO.OUT_CLR);
:				}
:	
:				Util.copyData(sensor, 0, Reply, offset, 2);
:				Util.copyData(ReadData, 0, Reply, offset + 2, 2);
:				LIP.send(Reply, 0, REPLY_SIZE);
:	
:	            ADC_Device.read(Device.TIMED, 1, Time.currentTicks() + Time.toTickSpan(Time.SECONDS, READ_INTERVAL));
:				LED.setState(IRIS.LED_YELLOW, 0);
:	            return 0;
:			}
:	         */
:	
:		}
:	
:	}

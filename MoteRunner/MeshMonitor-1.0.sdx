A!	MeshMonitor-1.0.36357	2.0	C#

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.iris.IRIS

C!	c:003	TRU.MeshMonitor.MeshMonitor	-1	0	c:000
R	Reply	b[]	0	0
R	ADC_Device	r:com.ibm.saguaro.system.ADC	0	1
R	GPIO_Device	r:com.ibm.saguaro.system.GPIO	0	2
R	HumidTempSensor	r:com.ibm.saguaro.system.SDev	0	3
G	ADC_CHANNEL_MASK	u	0	2
G	FLAG_FAILED	u	0	64
G	LIGHT_PWR_PIN	b	0	37
G	READ_INTERVAL	u	0	5
G	REPLY_SIZE	u	0	64
G	TEMP_PWR_PIN	b	0	16
M	ADCReadCallback(u,b[],u,u,l)i	-1	m:0059	000B2	158
M	ADC_Read_Callback(u,b[],u,u,l)i	-1	m:00A8	00150	104
M!	MeshMonitor(r:TRU.MeshMonitor.MeshMonitor)v	-1	m:00DC	001B8	6
M	on_Data(u,b[],u)i	-1	m:00DF	001BE	18

C	c:005	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	TRU.MeshMonitor.MeshMonitor.Reply	b[]	-1	0
r	TRU.MeshMonitor.MeshMonitor.ADC_Device	r:com.ibm.saguaro.system.ADC	-1	1
r	TRU.MeshMonitor.MeshMonitor.GPIO_Device	r:com.ibm.saguaro.system.GPIO	-1	2
r	TRU.MeshMonitor.MeshMonitor.HumidTempSensor	r:com.ibm.saguaro.system.SDev	-1	3
M	__init()v	-1	m:0014	00028	138

c	00035	0	15	0	15	0	m:0014
c	0003F	0	16	0	16	0	m:0014
c	00049	0	17	0	17	0	m:0014
c	00053	0	19	0	19	0	m:0014
c	00059	0	23	0	23	0	m:0014
c	0005A	0	24	0	24	0	m:0014
c	00060	0	26	0	26	0	m:0014
c	00068	0	27	0	27	0	m:0014
c	00069	0	28	0	28	0	m:0014
c	00076	0	29	0	29	0	m:0014
c	00081	0	30	0	30	0	m:0014
c	00094	0	32	0	32	0	m:0014
c	0009A	0	33	0	33	0	m:0014
c	000A0	0	34	0	34	0	m:0014
c	000A3	0	35	0	35	0	m:0014
c	000A4	0	35	0	35	0	m:0014
c	000A5	0	36	0	36	0	m:0014
c	000AB	0	37	0	37	0	m:0014
c	000AE	0	45	0	45	0	m:0014
e	000B2	m:0014
c	000B5	0	73	0	73	0	m:0059
l	000B5	00150	i	CS$1$0000	m:0059	8
l	000B5	00150	z	CS$4$0001	m:0059	9
l	000B5	00150	b[]	CS$0$0002	m:0059	10
l	000B5	00150	u	offset	m:0059	6
l	000B5	00150	b[]	sensor	m:0059	7
l	000B5	00150	u	ReadFlags	m:0059	0
l	000B5	00150	b[]	ReadData	m:0059	1
l	000B5	00150	u	ReadLength	m:0059	2
l	000B5	00150	u	ReadInfo	m:0059	3
l	000B5	00150	l	ReadTime	m:0059	4
c	000BB	0	76	0	76	0	m:0059
c	000C0	0	77	0	77	0	m:0059
c	000D3	0	78	0	78	0	m:0059
c	000DA	0	79	0	79	0	m:0059
c	000E5	0	80	0	80	0	m:0059
c	000F1	0	83	0	83	0	m:0059
c	000FD	0	84	0	84	0	m:0059
c	00108	0	85	0	85	0	m:0059
c	00112	0	88	0	88	0	m:0059
c	0011D	0	89	0	89	0	m:0059
c	0012A	0	90	0	90	0	m:0059
c	00133	0	92	0	92	0	m:0059
c	00145	0	93	0	93	0	m:0059
c	0014A	0	94	0	94	0	m:0059
c	0014D	0	95	0	95	0	m:0059
e	00150	m:0059
c	00153	0	54	0	54	0	m:00A8
l	00153	001B7	i	CS$1$0000	m:00A8	7
l	00153	001B7	z	CS$4$0001	m:00A8	8
l	00153	001B7	b[]	CS$0$0002	m:00A8	9
l	00153	001B7	u	ReadFlags	m:00A8	0
l	00153	001B7	b[]	ReadData	m:00A8	1
l	00153	001B7	u	ReadLength	m:00A8	2
l	00153	001B7	u	ReadInfo	m:00A8	3
l	00153	001B7	l	ReadTime	m:00A8	4
c	0015F	0	55	0	55	0	m:00A8
c	00164	0	56	0	56	0	m:00A8
c	0016B	0	59	0	59	0	m:00A8
l	0016B	001B3	u	payload_offset	m:00A8	6
c	00171	0	61	0	61	0	m:00A8
c	00176	0	62	0	62	0	m:00A8
c	00186	0	63	0	63	0	m:00A8
c	00193	0	64	0	64	0	m:00A8
c	0019C	0	65	0	65	0	m:00A8
c	001AE	0	66	0	66	0	m:00A8
c	001B3	0	69	0	69	0	m:00A8
c	001B5	0	70	0	70	0	m:00A8
e	001B8	m:00A8
l!	001BB	001BE	r:TRU.MeshMonitor.MeshMonitor	this	m:00DC	0
e!	001BE	m:00DC
c	001C1	0	48	0	48	0	m:00DF
l	001C1	001D0	i	CS$1$0000	m:00DF	3
l	001C1	001D0	u	Info	m:00DF	0
l	001C1	001D0	b[]	Buffer	m:00DF	1
l	001C1	001D0	u	Length	m:00DF	2
c	001CC	0	49	0	49	0	m:00DF
c	001CE	0	50	0	50	0	m:00DF
e	001D0	m:00DF
S	C:\Users\Kerberos\Dropbox\Programming\Repos\Mesh-Monitor\MoteRunner\MeshMonitor.cs
:	namespace TRU.MeshMonitor {
:		using com.ibm.saguaro.system;
:		using com.ibm.iris;
:		
:		public class MeshMonitor {
:			
:			// Globals
:	        private const uint FLAG_FAILED = 0x40;
:			private const uint ADC_CHANNEL_MASK = 0x02;
:			private const uint REPLY_SIZE = 0x40; // 64
:			private const uint READ_INTERVAL = 5; // 5s
:			private const byte TEMP_PWR_PIN = IRIS.PIN_PW0; // PC0
:			private const byte LIGHT_PWR_PIN = IRIS.PIN_INT5; // PE5
:			
:			private static byte[] Reply = new byte[REPLY_SIZE];
:			private static ADC ADC_Device = new ADC();
:			private static GPIO GPIO_Device = new GPIO();
:	
:	        private static SDev HumidTempSensor = new SDev();
:	        //private static SDev LightSensor = new SDev();
:	        //private static SDev AccelSensor = new SDev();
:	
:			static MeshMonitor() {
:				LED.setState(IRIS.LED_YELLOW, 1);
:	
:				Assembly.setDataHandler(on_Data);
:	            try {
:	                HumidTempSensor.open(IRIS.DID_MTS400_HUMID_TEMP, null, 0, 0);
:	                HumidTempSensor.setReadHandler(ADC_Read_Callback);
:	                HumidTempSensor.read(Device.TIMED, 4, Time.currentTicks() + Time.toTickSpan(Time.SECONDS, READ_INTERVAL));
:	
:	                LED.setState(IRIS.LED_YELLOW, 0);
:				    LED.setState(IRIS.LED_GREEN, 1);
:	            }
:	            catch {
:	                LED.setState(IRIS.LED_RED, 1);
:	                return;
:	            }
:	
:				//GPIO_Device.open();
:				//GPIO_Device.configureOutput(LIGHT_PWR_PIN, GPIO.OUT_SET);
:				//ADC_Device.open(ADC_CHANNEL_MASK, GPIO.NO_PIN, 0, 0); // Manual power; No warmup; No interval (ltr)
:				//ADC_Device.setReadHandler(ADCReadCallback);
:				//ADC_Device.read(Device.TIMED, 1, Time.currentTicks() + Time.toTickSpan(Time.SECONDS, READ_INTERVAL));
:			}
:	
:			private static int on_Data(uint Info, byte[] Buffer, uint Length) {
:				Util.copyData(Buffer, 0, Reply, 0, Length);
:				return 0;
:			}
:	
:	        private static int ADC_Read_Callback(uint ReadFlags, byte[] ReadData, uint ReadLength, uint ReadInfo, long ReadTime) {
:	            // Check flags
:	            if ((ReadFlags & FLAG_FAILED) != 0) {
:	                LED.setState(IRIS.LED_YELLOW, 1);
:	                LED.setState(IRIS.LED_RED, 1);
:	            }
:	            else {
:	                uint payload_offset = LIP.getPortOff() + 1;
:	
:	                LED.setState(IRIS.LED_YELLOW, 1);
:	                Util.copyData(new byte[] { 0 }, 0, Reply, payload_offset, 1); // Humidit+Temperature ID = 0
:	                Util.copyData(ReadData, 0, Reply, payload_offset + 1, ReadLength);
:	                LIP.send(Reply, 0, REPLY_SIZE);
:	                HumidTempSensor.read(Device.TIMED, 4, Time.currentTicks() + Time.toTickSpan(Time.SECONDS, READ_INTERVAL));
:	                LED.setState(IRIS.LED_YELLOW, 0);
:	            }
:	
:	            return 0;
:	        }
:	
:			private static int ADCReadCallback(uint ReadFlags, byte[] ReadData, uint ReadLength, uint ReadInfo, long ReadTime) {
:				uint offset = LIP.getPortOff() + 1;
:				byte[] sensor;
:	
:				LED.setState(IRIS.LED_YELLOW, 1);
:				if (GPIO_Device.doPin(GPIO.CTRL_READ, TEMP_PWR_PIN) == 0) {
:					sensor = new byte[] {0, 0}; // 0 => Temperature
:					GPIO_Device.configureOutput(TEMP_PWR_PIN, GPIO.OUT_SET);
:					GPIO_Device.configureOutput(LIGHT_PWR_PIN, GPIO.OUT_CLR);
:				}
:				else {
:					sensor = new byte[] {1, 0}; // 1 => Light
:					GPIO_Device.configureOutput(LIGHT_PWR_PIN, GPIO.OUT_SET);
:					GPIO_Device.configureOutput(TEMP_PWR_PIN, GPIO.OUT_CLR);
:				}
:	
:				Util.copyData(sensor, 0, Reply, offset, 2);
:				Util.copyData(ReadData, 0, Reply, offset + 2, 2);
:				LIP.send(Reply, 0, REPLY_SIZE);
:	
:	            ADC_Device.read(Device.TIMED, 1, Time.currentTicks() + Time.toTickSpan(Time.SECONDS, READ_INTERVAL));
:				LED.setState(IRIS.LED_YELLOW, 0);
:	            return 0;
:			}
:	
:		}
:	
:	}
